TDScriptLeafNode{#name:'commit',#contents:'[ :topez :objIn :tokens :command :commandNode | 
| opts args |
\"for help: ./commit -h\"
command
  getOptsMixedLongShort:
    {#(\'amend\' nil #\'none\').
    #(\'help\' $h #\'none\').
    #(\'message\' nil #\'required\').
    #(\'extensionCall\' nil #\'none\').
    #(\'projectName\' nil #\'required\').
    #(\'template\' nil #\'optional\')}
  optionsAndArguments: [ :options :operands | 
    opts := options.
    args := operands ].
opts
  at: \'help\'
  ifAbsent: [ 
    | projectTool projectName commitMessage resolvePathBlock commandPath extensionCallError |
    projectTool := topez toolInstanceFor: \'project\'.
    extensionCallError := [ :optionName | 
    opts
      at: \'extensionCall\'
      ifPresent: [ :ignored | 
        TodeCommandError
          signal: \'--\' , optionName , \' required when using --extensionCall\' ] ].
    resolvePathBlock := [ :path | 
    (path beginsWith: \'@\')
      ifTrue: [ 
        | commitMessagePath |
        commitMessagePath := path copyFrom: 2 to: path size.
        (topez lookup: commitMessagePath) dotSelfObject ]
      ifFalse: [ path ] ].
    commandPath := commandNode parent printString.
    opts
      at: \'projectName\'
      ifPresent: [ :arg | projectName := arg ]
      ifAbsent: [ 
        extensionCallError value: \'projectName\'.
        args size = 1
          ifTrue: [ projectName := args at: 1 ]
          ifFalse: [ 
            | projectExtension |
            projectExtension := (topez lookup: commandPath , \'/project\')
              dotSelfObject.
            projectName := projectExtension projectName ] ].
    opts
      at: \'message\'
      ifPresent: [ :arg | commitMessage := resolvePathBlock value: arg ]
      ifAbsent: [ 
        extensionCallError value: \'message\'.
        opts
          at: \'template\'
          ifPresent: [ :arg | 
            | template |
            template := arg
              ifNil: [ \'\' ]
              ifNotNil: [ resolvePathBlock value: arg ].
            commitMessage := (GsMultiLineTextInteraction
              prompt:
                \'Please enter a commit message for project: \' , projectName
              template: template) signal ]
          ifAbsent: [ commitMessage := (topez lookup: commandPath , \'/commitMessage\') dotSelfObject ] ].
    commitMessage
      ifNotNil: [ 
        | registration |
        registration := projectTool projectRegistrationFor: projectName.
        opts
          at: \'amend\'
          ifPresent: [ :ignored | 
            extensionCallError value: \'amend\'.
            (projectTool hasGitRepository: registration)
              ifTrue: [ projectTool gitCommit: registration commitMessage: commitMessage ]
              ifFalse: [ \'not a git repository - amend commit canceled\' ] ]
          ifAbsent: [ projectTool projectCommit: registration commitMessage: commitMessage ] ]
      ifNil: [ \'commit canceled\' ] ]
  ifPresent: [ :ignored | 
    TDManPage
      viewManPage:
        \'NAME
  commit - commit Metacello project
SYNOPSIS
  commit [-h|--help] 
  commit [ ( --message=<commit-message-ref> | --template[=<commit-message-ref>] ) ] \\
         [--extensionCall]  [ ( --projectName=<project-name> | <project-name> ) ] \\
         [--amend]

DESCRIPTION
  Script for saving all dirty packages (including the configuration/baseline) to the
  repository associated with the project. If the repository is a git repository, a 
  git commit (see `project --help commit`) is performed.

  With no arguments, this script expects to find an object defined in the 
  <path-to-commit-node-parent>/project node that responds to the #projectName message. 
  The script expects to find a String defined in the 
  <path-to-commit-node-parent>/commitMessage that is used as the commit message.

  Once the <project-name> and <commit-message> have been resolved (see the OPTIONS
  section) the #projectCommit:commitMessage: message is sent to the project tool.

  This script can be invoked from the `save` menu item in the Project Browser (see
  `project --help list` and cls comment TDProjectExtensionsDefinition).

  This script is provided to give you the opportunity to customize `commit` behavior 
  for both the command line and Project Browser.

OPTIONS
  --amend
    For git-based projects, a `git commit --amend` command is performed using the 
    commit message allowing you to change the commit message of the immediately 
    preceding commit. No package commits are performed.

  --extensionCall
    When present, signifies that the command was called by the Project Browser and 
    that user interactions should not be employed.

  --help
    Bring up this man page.

  --message=<commit-message-ref> | --template[=<commit-message-ref>]
    Specifies the commit message to be used for the commit of packages and git 
    repository.

    In the first form, the exact message is specified. The <commit-message-ref> is
    either a string:

      ./commit --message=`this is a test commit`

    or a path to a node that resolves to a string:

      ./commit --message=@/home/tode/commitMessage 

    In the second form, if the --template option is present with no arguments, then 
    the user is prompted for a commit message. If an argument is specified then the
    resulting string will be used as the initial contents of the commit message 
    prompt.

    If no --message or --tempate option is present, the commit message will be 
    extracted from the <path-to-commit-node-parent>/commitMessage node.

  --projectName=<project-name> | <project-name>
    Specifies the <project-name>. 

    The first form is used by the Project Browser (see `project --help list` and
    `cls comment TDProjectExtensionsDefinition>>commandmap` for more information). 

    The second form can be used to explicitly identify a project. 

    If no <project-name> is specified, the object in the
    <path-to-commit-node-parent>/project node is sent the message #projectName 
    to resolve the <project-name>

EXAMPLES
  ./commit --help

  ./commit
  ./commit Tode

  ./commit --message=@/home/tode/commitMessage 
  ./commit --message=`this is a test commit` 

  ./commit --template
  ./commit --template=@/home/tode/commitMessage 

SEE ALSO
  git --help commit

  project --help
  project --help commit

  cls comment TDMetacelloProjectBrowser TDMetacelloTool TDProjectExtensionsDefinition
\'
      topez: topez ] ]',#creationTime:DateAndTime['2014-05-14T15:09:33.8307890892028-07:00'],#modificationTime:DateAndTime['2014-05-15T06:12:50.6598451137542-07:00']}